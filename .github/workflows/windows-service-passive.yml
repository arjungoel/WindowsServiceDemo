name: Deploying a CI/CD for Windows Service using GitHub Actions and upload the executable file in Amazon S3 in Passive Mode

on:
  # workflow_run:
  #   workflows: ["Deploying a CI/CD for Windows Service using GitHub Actions and upload the executable file in Amazon S3 in Active Mode"]
  #   types:
  #     - completed
  # workflow_dispatch:
  push:
    branches: [ "master" ]
    paths:
      - '.github/workflows/windows-service-passive.yml'
  # pull_request:
  #   branches: [ "master" ]

env:
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  GIT_CONFIG_EMAIL: ${{ secrets.GIT_CONFIG_EMAIL }}
  GIT_CONFIG_USERNAME: ${{ secrets.GIT_CONFIG_USERNAME }}
  DEFAULT_JOB_TIMEOUT: ${{ vars.DEFAULT_JOB_TIMEOUT }}

jobs:
       build:
         runs-on: windows-latest
         environment: production
         defaults:
           run:
             shell: cmd
         env:
          BUILD_PATH: ${{ vars.BUILD_PATH }}
          S3_CLIENT_FOLDER: ${{ vars.S3_CLIENT_FOLDER }}


         steps:
           - name: Checkout code repository
             uses: actions/checkout@v3

           - name: Setup MSBuild
             uses: microsoft/setup-msbuild@v1

           - name: Setup NuGet
             uses: NuGet/setup-nuget@v1.0.5

           - name: Restore Packages
             run: nuget restore WindowsServiceDemo.sln

           - name: Build solution
             run: msbuild WindowsServiceDemo.sln /p:Configuration=Release /p:DeployOnBuild=true /p:AutoParameterizationWebConfigConnectionStrings=False
          
           - name: Git config
             shell: powershell
             run: |
              git config --global user.email "${{ env.GIT_CONFIG_EMAIL }}"
              git config --global user.name "${{ env.GIT_CONFIG_USERNAME }}"

           - name: Determine next version v2
             run: .\tag_release_main.ps1
             shell: pwsh

           - name: Zip the Build folder
             shell: powershell
             run: Compress-Archive -Path "${{ env.BUILD_PATH }}" -DestinationPath "${{ env.BUILD_PATH }}\WindowsServiceDemo.zip"
      
           - name: Set AWS credentials
             uses: aws-actions/configure-aws-credentials@v1
             with:
               aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
               aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
               aws-region: ${{ secrets.AWS_REGION }}

           - name: Upload the windows service executable (.exe) file to S3 bucket
             shell: powershell
             env:
               EXECUTABLE_PATH: ${{ secrets.EXECUTABLE_PATH }}
             run: |
              aws s3 cp ${{ env.BUILD_PATH }}\WindowsServiceDemoPassive.zip s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_CLIENT_FOLDER }}/windows-service-app/
              aws s3 cp release-passive.txt s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_CLIENT_FOLDER }}/windows-service-app/
     
       deploy:
        needs: build
        runs-on: [ self-hosted, Windows, X64, windows-service-demo-passive ]
        # strategy:
        #   matrix:
        #     os: [windows-service-demo, windows-service-demo-passive ]
        environment: production
        timeout-minutes: ${{ fromJSON(vars.DEFAULT_JOB_TIMEOUT) }}
        defaults:
          run:
           shell: cmd
        env:
          SERVICE_NAME: ${{ vars.SERVICE_NAME }}
          S3_CLIENT_FOLDER: ${{ vars.S3_CLIENT_FOLDER }}
          SH_RUNNER_WORK_LOCATION: ${{ vars.SH_RUNNER_WORK_LOCATION }}

        steps:
         - name: Set AWS credentials
           uses: aws-actions/configure-aws-credentials@v1
           with:
             aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
             aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
             aws-region: ${{ secrets.AWS_REGION }}
         
         - name: Delete the zipped folder and unzipped folder if not deleted gracefully from the previous build run
           shell: powershell
           run: |
            $folderPath = "${{ env.SH_RUNNER_WORK_LOCATION }}\windows-service-demo"
            $testPath = Test-Path -Path $folderPath -PathType Container
            $zipFilePath = "${{ env.SH_RUNNER_WORK_LOCATION }}\WindowsServiceDemoPassive.zip"
            $zipFileTestPath = Test-Path -Path $zipFilePath -PathType Leaf

            if ($testPath -eq $true) {
              takeown /F "$folderPath" /r /d y
              icacls "$folderPath" /grant Administrators:F /t
              Remove-Item -Path $folderPath -Recurse -Force -ErrorAction SilentlyContinue
            } elseif ($zipFileTestPath -eq $true) {
              Write-Output "File '$zipFilePath' exists. Removing..."
              Remove-Item -Path $zipFilePath -Force
              Write-Output "File removed successfully."
            } else {
              Write-Output "Neither unzipped folder nor zipped file found."
            }
        
         - name: Download the Windows Service Executable (.exe) file from S3 bucket to EC2 instance location
           shell: powershell
           run: aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_CLIENT_FOLDER }}/windows-service-app/WindowsServiceDemoPassive.zip ${{ env.SH_RUNNER_WORK_LOCATION }}
                    
         - name: To check Windows Service existence (exists or not) and kill the process if required
           shell: powershell
           run: |
            $serviceName = "${{ env.SERVICE_NAME }}"

            $service = Get-Service -Name $serviceName -ErrorAction SilentlyContinue

            if ($service -ne $null) {
              Write-Host "Service '$serviceName' exists"
             
              # Killing the process will automatically stop the service
              cmd.exe /C "taskkill /f /im WindowsServiceDemo.exe"
              Start-Sleep -Seconds 5
             
              # Delete the service
              sc.exe DELETE $serviceName
            } else {
                Write-Host "Service '$serviceName' not found."
            }

         - name: Delete the unzipped folder (if exists)
           shell: powershell
           run: |
            $folderPath = "${{ env.SH_RUNNER_WORK_LOCATION }}\windows-service-demo"
            $testPath = Test-Path -Path $folderPath -PathType Container
            if ($testPath -eq $true) {
              takeown /F "$folderPath" /r /d y
              icacls "$folderPath" /grant Administrators:F /t
             
              Remove-Item -Path $folderPath -Recurse -Force -ErrorAction SilentlyContinue
            }

         - name: Unzipping the Zip file
           shell: powershell
           run: Expand-Archive -Path "${{ env.SH_RUNNER_WORK_LOCATION }}\WindowsServiceDemoPassive.zip" -DestinationPath "${{ env.SH_RUNNER_WORK_LOCATION }}\windows-service-demo" -Force
  
         - name: Install the windows service
           shell: powershell
           run: |
            sc.exe create "${{ env.SERVICE_NAME }}" binPath= "${{ env.SH_RUNNER_WORK_LOCATION }}\windows-service-demo\Release\WindowsServiceDemo.exe"

         - name: Start the service
           shell: powershell
           run: |
            Start-Service -Name "${{ env.SERVICE_NAME }}"
        
         - name: Check the service status
           shell: powershell
           run: |
            sc.exe Query "${{ env.SERVICE_NAME }}"
        
         - name: Download the release-passive.txt file from S3 bucket to EC2 location and rename the artifacts file in S3 bucket
           shell: powershell
           run: |
            aws s3 cp s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_CLIENT_FOLDER }}/windows-service-app/release-passive.txt ${{ env.SH_RUNNER_WORK_LOCATION }}
            $output = cat ${{ env.SH_RUNNER_WORK_LOCATION }}\release-passive.txt
            aws s3 mv s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_CLIENT_FOLDER }}/windows-service-app/WindowsServiceDemoPassive.zip s3://${{ env.S3_BUCKET_NAME  }}/${{ env.S3_CLIENT_FOLDER }}/windows-service-app/WindowsServiceDemoPassive-$output.zip
                  
         - name: Delete the zipped file to allow new builds gracefully
           shell: powershell
           run: Remove-Item "${{ env.SH_RUNNER_WORK_LOCATION }}\WindowsServiceDemoPassive.zip"
              
         - name: Delete the release-passive.txt file from S3 bucket and Server location 
           shell: powershell
           run: |
            aws s3 rm s3://${{ env.S3_BUCKET_NAME }}/${{ env.S3_CLIENT_FOLDER }}/windows-service-app/release-passive.txt    
            Remove-Item ${{ env.SH_RUNNER_WORK_LOCATION }}\release-passive.txt